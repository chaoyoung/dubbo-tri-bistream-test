server:
  port: 8080
  shutdown: graceful
call:
  rsocket:
    server:
      port: 8089
spring:
  main:
    web-application-type: servlet
    allow-bean-definition-overriding: true
    allow-circular-references: true
#  config:
#    use-legacy-processing: true
  lifecycle:
    timeout-per-shutdown-phase: 90s
  rsocket:
    server:
      port: 8088
      transport: tcp
  profiles:
    active: ${env:DEV}
  jackson:
    locale: zh_CN
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
    mapper:
      propagate-transient-marker: true
  cache:
    type: redis
  cloud:
    inetutils:
      ignored-interfaces:
        - docker0
        - veth.*
      use-only-site-local-interfaces: true
    consul:
      host: ${consul.host:}
      port: ${consul.port:}
      enabled: ${consul.enabled:false}
      discovery:
#        instance-id: ${spring.application.name}:${consul-instance-id}
        service-name: ${spring.application.name}
        instance-id: ${spring.application.name}-${spring.cloud.client.ip-address}-${server.port}
        health-check-path: /actuator/health
        tags: env=${env}, management.context-path=/actuator, health.path=health
        prefer-ip-address: true
        health-check-tls-skip-verify: true
        health-check-critical-timeout: 5m
        health-check-interval: 5s
        query-passing: true
      retry:
        max-attempts: ${consul.retry.max-attempts:500}
    nacos:
      discovery:
        enabled: true
        metadata:
          tags: env=${env:DEV}
          management:
            context-path: /actuator
        watch:
          enabled: false
    sentinel:
      enabled: ${csp.sentinel.enabled:true}
#      log:
#        dir: /opt/logs/csp/
      transport:
        port: ${csp.sentinel.transport.port:8719}
        dashboard: ${csp.sentinel.dashboard.server:10.20.0.100:30003}
      datasource:
        flow_ds:
          nacos:
            server-addr: ${spring.cloud.nacos.server-addr}
            username: ${spring.cloud.nacos.username:}
            password: ${spring.cloud.nacos.password:}
            data-id: ${spring.application.name}-flow-rules
            group-id: SENTINEL_GROUP
            data-type: json
            # 限流规则
            rule-type: flow
        degrade_ds:
          nacos:
            server-addr: ${spring.cloud.nacos.server-addr}
            username: ${spring.cloud.nacos.username:}
            password: ${spring.cloud.nacos.password:}
            data-id: ${spring.application.name}-degrade-rules
            group-id: SENTINEL_GROUP
            data-type: json
            # 熔断规则
            rule-type: degrade
#        param_flow_ds:
#          nacos:
#            namespace-name: sentinel-rule
            # 参数限流规则
#            rule-type: param-flow
#            flow-rules-key: ${spring.application.name}-param-flow-rules
        system_ds:
          nacos:
            server-addr: ${spring.cloud.nacos.server-addr}
            username: ${spring.cloud.nacos.username:}
            password: ${spring.cloud.nacos.password:}
            data-id: ${spring.application.name}-system-rules
            group-id: SENTINEL_GROUP
            data-type: json
            # 系统限流规则
            rule-type: system
#        system_ds:
#          nacos:
#            namespace-name: sentinel-rule
            # 认证限流(黑白名单)规则
#            rule-type: authority
#            flow-rules-key: ${spring.application.name}-authority-rules
  redis:
    host: ${redis.host}
    port: ${redis.port:6379}
    database: ${redis.databse:0}
    # 连接超时时间（毫秒）
    timeout: ${redis.timeout:2000}
    lettuce:
      pool:
        # 连接池最大连接数（使用负值表示没有限制）
        max-active: ${redis.max-active:8}
        # 连接池最大阻塞等待时间（使用负值表示没有限制）
        max-wait: ${redis.max-wait:-1}
        # 连接池中的最大空闲连接
        max-idle: ${redis.max-idle:8}
        # 连接池中的最小空闲连接
        min-idle: ${redis.min-idle:0}
    jedis:
      pool:
        max-active: ${redis.max-active:8}
        max-wait: ${redis.max-wait:-1}
        max-idle: ${redis.max-idle:8}
        min-idle: ${redis.min-idle:0}
  data:
    mongodb:
      auto-index-creation: false
      uri: ${mongodb.uri}
#      host: ${mongodb.host}
      database: ${mongodb.database:dialog}
#      username: ${mongodb.username:}
#      password: ${mongodb.password:}
#      authentication-database: admin
#      replica-set:
#      connections-per-host: ${mongodb.connections-per-host:10}
#      min-connections-per-host: ${mongodb.min-connections-per-host:10}
  file:
    storage:
      location: ${file.storage.location:oss}
      directory: ${file.storage.directory:listen-dev-xy}
      oss:
        enabled: ${oss.enabled:true}
      localfile:
        scatter: ${file.storage.localfile.scatter:false}
      http-proxy:
        enabled: ${file.storage.http-proxy.enabled:false}
        url: ${file.storage.http-proxy.url:}
  arthas.enabled: false
  dynamic:
    tp:
      enabled: true
      enabledBanner: true                             # 是否开启banner打印，默认true
      enabledCollect: true                            # 是否开启监控指标采集，默认false
      collectorTypes:                                 # 监控数据采集器类型，默认MICROMETER
        - MICROMETER
#        - LOGGING
#        - INTERNAL_LOGGING
      logPath: logs                                   # 监控日志数据路径，默认 ${user.home}/logs，采集类型非jsonlog不用配置
      monitorInterval: 5                              # 监控时间间隔（报警判断、指标采集），默认5s
      dubboTp:                                        # dubbo 线程池配置
        - threadPoolName: dubboTp#20880               # 名称规则：dubboTp + "#" + 协议端口
          corePoolSize: 100
          maximumPoolSize: 200
          keepAliveTime: 60
      executors:                                      # 动态线程池配置，都有默认值，采用默认值的可以不配置该项，减少配置量
        - threadPoolName: nlsTtsExecutor
          threadNamePrefix: nls-tts                   # 线程名前缀
          executorType: common                        # 线程池类型common、eager：适用于io密集型
          corePoolSize: 64
          maximumPoolSize: 256
          queueType: SynchronousQueue                 # 任务队列，查看源码queueTypeEnum枚举类
          rejectedHandlerType: AbortPolicy            # 拒绝策略，查看RejectedTypeEnum枚举类
          keepAliveTime: 60
          taskWrapperNames: ["ttl"]                   # 任务包装器名称，集成TaskWrapper接口
          preStartAllCoreThreads: true                # 是否预热所有核心线程，默认false
          allowCoreThreadTimeOut: false               # 是否允许核心线程池超时
          waitForTasksToCompleteOnShutdown: true      # 参考spring线程池设计，优雅关闭线程池
          awaitTerminationSeconds: 5                  # 单位（s）
          runTimeout: 3000                            # 任务执行超时阈值，目前只做告警用，单位（ms）
          queueTimeout: 1000                          # 任务在队列等待超时阈值，目前只做告警用，单位（ms）
        - threadPoolName: ttsVoiceExecutor
          threadNamePrefix: tts-voice
          executorType: common
          corePoolSize: 50
          maximumPoolSize: 200
          queueType: SynchronousQueue
          rejectedHandlerType: CallerRunsPolicy
          keepAliveTime: 60
          taskWrapperNames: ["ttl"]
          preStartAllCoreThreads: true
          waitForTasksToCompleteOnShutdown: true
          awaitTerminationSeconds: 3
          runTimeout: 3000
          queueTimeout: 1000
        - threadPoolName: voiceProcessExecutor
          threadNamePrefix: voice-process
          executorType: common
          corePoolSize: 32
          maximumPoolSize: 128
          queueType: VariableLinkedBlockingQueue
          queueCapacity: 512
          rejectedHandlerType: CallerRunsPolicy
          keepAliveTime: 60
          taskWrapperNames: ["ttl"]
          preStartAllCoreThreads: true
          runTimeout: 500
          queueTimeout: 1000
        - threadPoolName: callInitExecutor
          threadNamePrefix: call-init
          executorType: common
          corePoolSize: 20
          maximumPoolSize: 200
          queueType: VariableLinkedBlockingQueue
          queueCapacity: 1000
          rejectedHandlerType: AbortPolicy
          keepAliveTime: 60
          taskWrapperNames: ["ttl"]
          preStartAllCoreThreads: true
          runTimeout: 1000
          queueTimeout: 1000
        - threadPoolName: callProcessExecutor
          threadNamePrefix: call-process
          executorType: common
          corePoolSize: 32
          maximumPoolSize: 64
          queueType: VariableLinkedBlockingQueue
          queueCapacity: 128
          rejectedHandlerType: CallerRunsPolicy
          keepAliveTime: 60
          taskWrapperNames: ["ttl"]
          runTimeout: 500
          queueTimeout: 1000

logging:
  level:
    root: info
    com.dtp: info
    com.listenrobot: info
    org.springframework:
      data.mongodb.core.index.MongoPersistentEntityIndexResolver: warn
#      context.support.PostProcessorRegistrationDelegate: warn
#    org.reflections.Reflections: warn
#    com.alibaba.spring.beans.factory.annotation.ConfigurationBeanBindingRegistrar: warn
#    org.apache.dubbo.config.spring.beans.factory.annotation.ServiceClassPostProcessor: warn
management:
  endpoints:
    web:
      exposure:
        include: info,health,shutdown,logfile,loggers,heapdump,threaddump,metrics,prometheus
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
      env: ${env:DEV}
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
      probes:
        enabled: true
      show-details: always
    shutdown:
      enabled: true
    prometheus:
      enabled: true
dubbo:
  application:
    name: ${spring.application.name}-dubbo
    # 可选值：local, remote, composite
#    metadata-type: composite
    register-mode: all
    # 可选值
    # FORCE_INTERFACE，只消费接口级地址，如无地址则报错，单订阅 2.x 地址
    # APPLICATION_FIRST，智能决策接口级/应用级地址，双订阅
    # FORCE_APPLICATION，只消费应用级地址，如无地址则报错，单订阅 3.x 地址
#    service-discovery.migration: APPLICATION_FIRST
    protocol: tri
    enable-empty-protection: false
  scan:
    base-packages: com.listenrobot.dm
#  protocol:
#    name: dubbo
#    port: -1
#    payload: 104857600
  protocols:
    dubbo:
      name: dubbo
      port: 20880
      payload: 104857600
      serialization: hessian2
    triple:
      name: tri
      port: 50051
      serialization: protobuf
    grpc:
      name: grpc
      port: 50052
      serialization: protobuf
#  registry:
#    protocol: nacos
#    client: curator
    # 挂载到 Spring Cloud 注册中心
#    address: spring://10.20.0.100
#  cloud.subscribed-services: ''
#  metadata-report:
    # 针对dubbo-2.7.7,2.7.8临时解决 Failed to receive INITIALIZED event from zookeeper, pls. check if url zookeeper://zk-cs.default:2181/org.apache.dubbo.metadata.report.MetadataReport?client=curator&dubbo.config-center.root-path=/ is correct
    # 源码问题链接 https://github.com/apache/dubbo/issues/5678
#    cycle-report: false
  registry:
    enable-empty-protection: false
    address: nacos://${spring.cloud.nacos.server-addr}?username=${spring.cloud.nacos.username}&password=${spring.cloud.nacos.password}
#    group: dubbo
    use-as-metadata-center: true
    use-as-config-center: true
#    address: nacos://${spring.cloud.nacos.server-addr}
#    username: ${spring.cloud.nacos.username}
#    password: ${spring.cloud.nacos.password}
#  registries:
#    nacos:
#      address: ${nacos.server-addr}
#      username: ${nacos.username:}
#      password: ${nacos.password:}
#    zookeeper:address: zookeeper://${zk.address}
    # 注册中心请求超时时间(毫秒)，缺省值：5000
    timeout: 5000
    # 注册中心不存在时，是否报错，缺省值：true
    check: true
    # 是否向此注册中心注册服务，如果设为false，将只订阅，不注册，缺省值：true
    register: true
    # 是否向此注册中心订阅服务，如果设为false，将只注册，不订阅，缺省值：true
    subscribe: true
  provider:
    # 延迟注册服务时间(毫秒)，设为-1时，表示延迟到Spring容器初始化完成时暴露服务，缺省值：0
    delay: -1
    # 远程服务调用超时时间(毫秒)，缺省值：1000
    timeout: 3000
    # 远程服务调用重试次数，不包括第一次调用，不需要重试请设为0，缺省值：2
    retries: 0
#    prefer-serialization: protobuf
  consumer:
    check: false
alibaba:
  cloud:
    access-key: ${oss.key:}
    secret-key: ${oss.secret:}
    oss:
      enabled: ${oss.enabled:true}
      endpoint: ${oss.endpoint:}
rocketmq:
#  name-server: ${rocketmq.name-server:}
  producer:
    group: dm-group
    send-message-timeout: 3000
    retry-times-when-send-async-failed: 3
    # 发送消息的最大线程数
    send-message-thread-pool-nums: 64
    # 发送消息是否使用可重入锁
    use-reentrant-lock-when-put-message: true
#  consumer:
#    group: dm-group
#    topic: DM_TOPIC
#    selector-type: TAG
#    selector-expression: DIALOG_STATISTICS_DATA_TAG
#    pull-batch-size: 100
id.generator.zk.address: ${zk.address}

job:
  history-tts-voice:
    cleanup:
      enabled: false
      cron: '0 5 20 * * ?'
      before-days: 7
  check-unsynthesized-tts:
    cron: '0 */5 * * * ?'
arthas:
  app-name: ${spring.application.name}
#  agent-id: ${spring.cloud.client.ip-address}@${server.port}
  agent-id: ${spring.application.name}@${random.value}
  tunnel-server: ${arthas.tunnel-server:ws://10.20.0.100:7777/ws}

nls:
#  url: ws://10.20.6.106:8101/ws/v1
#  token: default
#  app-key: default
#  access-key-id: default
#  access-key-secret: default
#  apes-addr: http://10.20.6.106
#  apes-auth: admin:e363865bdcc7b3f7f09c98c6780620ef
#  tts.server-addr: http://10.20.6.106:7701
#  enabled: true
#  config:
#    url: ws://10.20.6.106:8101/ws/v1
#    access-key-id: default
#    access-key-secret: default
#    token: default
#    app-key: default
#    apes-addr: http://10.20.6.106
#    apes-auth: admin:e363865bdcc7b3f7f09c98c6780620ef
#    tts-server-addr: http://10.20.6.106:7701
#ifly:
#  enabled: true
#  iat-config:
#    url: https://iat-api.xfyun.cn/v2/iat
#    appid: 4b20029e
#    apiSecret: OGFlZmMxYThlMTE4MTJhNTk5MGJhNTVj
#    apiKey: a69ecdad33207db6095d46319fc33caf